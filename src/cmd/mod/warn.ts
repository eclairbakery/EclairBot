import { Command, CommandFlags } from '@/bot/command.js';
import { PredefinedColors } from '@/util/color.js';
import { cfg } from '@/bot/cfg.js';

import * as log from '@/util/log.js';
import * as dsc from 'discord.js';
import {output as debug} from '@/bot/logging.js';

import warn from '@/bot/apis/mod/warns.js';
import parseTimestamp, { Timestamp } from '@/util/parseTimestamp.js';
import clamp from '@/util/clamp.js';

export const warnCmd: Command = {
    name: 'warn',
    aliases: cfg.mod.commands.warn.aliases,
    description: {
        main: 'Daj komuÅ› warna, by go onieÅ›mieliÄ‡, uciszyÄ‡, zamknÄ…Ä‡ mu morde i naduÅ¼yÄ‡ wÅ‚adzy. Å»art, ale nie naduÅ¼ywaj bo to siÄ™ Åºle skoÅ„czy... Nie wiesz z czym zadzierasz przybyszu!',
        short: 'Warnuje podanÄ… osobÄ™'
    },
    flags: CommandFlags.Important,

    expectedArgs: [
        {
            name: 'user',
            description: 'No ten, tu podaj uÅ¼ytkownika ktÃ³rego chcesz zwarnowaÄ‡',
            type: 'user-mention-or-reference-msg-author',
            optional: false,
        },
        {
            name: 'points',
            description: `Tu ile warn-pointsÃ³w chcesz daÄ‡, domyÅ›lnie 1 i raczej tego nie zmieniaj. No i ten, maksymalnie moÅ¼esz daÄ‡ ${cfg.mod.commands.warn.maxPoints}`,
            type: 'number',
            optional: true,
        },
        {
            name: 'duration',
            description: 'Czas po jakim warn wygaÅ›nie',
            type: 'timestamp',
            optional: true,
        },
        {
            name: 'reason',
            description: cfg.mod.commands.warn.reasonRequired
                ? 'Po prostu powÃ³d warna'
                : 'Po prostu powÃ³d warna. MoÅ¼esz go pominÄ…Ä‡ ale nie polecam',
            type: 'trailing-string',
            optional: !cfg.mod.commands.warn.reasonRequired,
        }
    ],

    permissions: {
        discordPerms: null,
        allowedRoles: cfg.mod.commands.warn.allowedRoles,
        allowedUsers: cfg.mod.commands.warn.allowedUsers
    },

    async execute(api) {
        let targetUser = api.getTypedArg('user', 'user-mention-or-reference-msg-author')?.value as dsc.GuildMember | undefined;
        let points = api.getTypedArg('points', 'number')?.value as number ?? 1;
        let reason = api.getTypedArg('reason', 'trailing-string')?.value as string ?? '';
        const duration = api.getTypedArg('duration', 'timestamp')?.value as Timestamp | null;
        let expiresAt = duration != null ? Math.floor(Date.now() / 1000) + duration : null;

        debug.log('Warn command args:', { targetUser, points, reason });

        if (!targetUser) {
            return log.replyError(
                api.msg,
                'Nie podano celu',
                'Kolego, myÅ›lisz Å¼e ja siÄ™ sam domyÅ›lÄ™ komu chcesz daÄ‡ warna? UÅ¼ycie: reply na wiadomoÅ›Ä‡ lub !warn <@user> (punkty:1) <powÃ³d>'
            );
        }

        if (targetUser.roles.cache.hasAny(...cfg.general.moderationProtectedRoles)) {
            return log.replyError(api.msg, 'Chronimy go!', 'UÅ¼ytkownik poprosiÅ‚ o ochronÄ™ i jÄ… dostaÅ‚!');
        }

        if (!reason) {
            if (cfg.mod.commands.warn.reasonRequired) {
                return log.replyError(api.msg, 'Nie podano powodu', 'Ale za co ten warn? proszÄ™ o doprecyzowanie!');
            } else {
                reason =
                    'Moderator nie poszczyciÅ‚ siÄ™ zbytniÄ… znajomoÅ›ciÄ… komendy i nie podaÅ‚ powodu... Ale moÅ¼e to i lepiej';
            }
        }

        if (targetUser.id === api.msg.author.id) {
            return log.replyError(
                api.msg,
                'Bro co ty odpierdalasz',
                'Co ty chcesz sobie daÄ‡ warna :sob:? Co jest z tobÄ… nie tak? Potrzebujesz pomocy?',
            );
        }

        points = clamp(cfg.mod.commands.warn.minPoints, points, cfg.mod.commands.warn.maxPoints);

        if (targetUser.id === api.msg.author.plainUser.client.user?.id) {
            points = 2;
            reason = 'nie warnuje siÄ™ istoty wyÅ¼szej panie';
            targetUser = api.msg.member.plainMember;
        }

        if (targetUser.id === '1409902422108934226') {
            points = 2;
            reason = 'co prawda watchdog istotÄ… wyÅ¼szÄ… nie jest ale siÄ™ lubimy wiÄ™c daje ci warna. nice try';
            targetUser = api.msg.member.plainMember;
        }

        try {
            await warn(targetUser, {
                reason,
                expiresAt: expiresAt ?? null,
                points,
                mod: api.msg.author.id
            });
        } catch (err) {
            debug.err(err);
            return log.replyError(api.msg, 'BÅ‚Ä…d bazy danych', 'Nie udaÅ‚o siÄ™ zapisaÄ‡ warna');
        }

        const embed = new dsc.EmbedBuilder()
            .setTitle(`ðŸ“¢ Masz warna, ${targetUser.user.username}!`)
            .setDescription(`WÅ‚aÅ›nie dostaÅ‚eÅ› darmoweeego warna (punktÃ³w: ${points})!`)
            .addFields(
                { name: 'Moderator', value: `<@${api.msg.author.id}>`, inline: true },
                { name: 'UÅ¼ytkownik', value: `<@${targetUser.id}>`, inline: true },
                { name: 'PowÃ³d', value: reason, inline: false },
                { name: 'Punkty', value: points.toString(), inline: true },
            )
            .setColor(PredefinedColors.Orange);

        if (duration) {
            embed.addFields({ name: 'Wygasa', value: `<t:${expiresAt}:R>`, inline: false });
        }

        await api.msg.reply({ embeds: [embed] });
    }
};
